#Libraries
from PIL import Image
import plotly.express as px

#Bibliotecas necess√°rias
import pandas as pd
import inflection
import streamlit as st


#Configura√ß√£o b√°sica da p√°gina
st.set_page_config(page_title='Countries', layout="wide")

# ======================================
# Fun√ß√µes
# ======================================


#Gr√°fico Barras: M√©dia Pre√ßo para Dois x Pa√≠ses
def average_cost_for_two_countries(df):
    
    #selecionar colunas
    cols = ['average_cost_for_two', 'country_name']

    #agrupar linhas por data
    #.sort_values('restaurant_id', ascending=False)
    dfaux = round(df.loc[:, cols].groupby(['country_name']).mean().sort_values('average_cost_for_two', ascending=False).reset_index(), 2)
    
    #desenhar o gr√°fico de barra
    fig = px.bar(dfaux, x='country_name', y='average_cost_for_two', text='average_cost_for_two', title='M√©dia de Pre√ßo de Um Prato para Duas Pessoaas por Pa√≠s')
    
    fig = fig.update_layout(xaxis_title='Pa√≠ses',
                            yaxis_title='Pre√ßo do prato para duas Pessoas')
    
    fig = fig.update_traces(textfont=dict(size=14), hovertemplate='Pa√≠s: %{x} <br>Pre√ßo do prato para duas Pessoas: %{y:.2f}')


    return fig


#Gr√°fico Barras: M√©dia Avalia√ß√µes x Pa√≠ses
def mean_votes_countries(df):
    
    #selecionar colunas
    cols = ['votes', 'country_name']

    #agrupar linhas por data
    #.sort_values('restaurant_id', ascending=False)
    dfaux = round(df.loc[:, cols].groupby(['country_name']).mean().sort_values('votes', ascending=False).reset_index(), 2)
    
    #desenhar o gr√°fico de barra
    fig = px.bar(dfaux, x='country_name', y='votes', text='votes', title='M√©dia de Avalia√ß√µes Feitas por Pa√≠s')
    
    fig = fig.update_layout(xaxis_title='Pa√≠ses',
                            yaxis_title='Quantidade de Avalia√ß√µes')
    
    fig = fig.update_traces(textfont=dict(size=14), hovertemplate='Pa√≠s: %{x} <br>Quantidade de Avalia√ß√µes: %{y}')


    return fig

#Gr√°fico Barras: Qtd Cidades x Pa√≠ses
def cities_countries(df):
    
    #selecionar colunas
    cols =  ['city', 'country_name']

    #agrupar linhas por data
    #.sort_values('restaurant_id', ascending=False)
    dfaux = df.loc[:, cols].groupby(['country_name']).nunique().sort_values('city', ascending=False).reset_index()
    
    #desenhar o gr√°fico de barra
    fig = px.bar(dfaux, x='country_name', y='city', text='city', title='Quantidade de Cidades Registrados por Pa√≠s')
    
    fig = fig.update_layout(xaxis_title='Pa√≠ses',
                            yaxis_title='Quantidade de Cidades')
    
    fig = fig.update_traces(textfont=dict(size=14), hovertemplate='Pa√≠s: %{x} <br>Quantidade de de Cidades: %{y}')


    return fig


#Gr√°fico Barras: Qtd Restaurantes x Pa√≠ses
def restaurant_countries(df):
    #selecionar colunas
    cols =  ['restaurant_id', 'country_name']

    #agrupar linhas por data
    #.sort_values('restaurant_id', ascending=False)
    dfaux = df.loc[:, cols].groupby(['country_name']).count().sort_values('restaurant_id', ascending=False).reset_index()
    
    #desenhar o gr√°fico de barra
    fig = px.bar(dfaux, x='country_name', y='restaurant_id', text='restaurant_id', title='Quantidade de Restaurantes Registrados por Pa√≠s')
    
    fig = fig.update_layout(xaxis_title='Pa√≠ses',
                            yaxis_title='Quantidade de Restaurantes')
    
    fig = fig.update_traces(textfont=dict(size=14), hovertemplate='Pa√≠s: %{x} <br>Quantidade de Restaurantes: %{y}')

    return fig


#Nomeando/Preenchendo os c√≥digos de pa√≠ses
COUNTRIES = {
1: "India",
14: "Australia",
30: "Brazil",
37: "Canada",
94: "Indonesia",
148: "New Zeland",
162: "Philippines",
166: "Qatar",
184: "Singapure",
189: "South Africa",
191: "Sri Lanka",
208: "Turkey",
214: "United Arab Emirates",
215: "England",
216: "United States of America",
}

def country_name(country_id):
    return COUNTRIES[country_id]


#Cria√ß√£o do Tipo de Categoria de Comida
def create_price_tye(price_range):
    if price_range == 1:
        return "cheap"
    elif price_range == 2:
        return "normal"
    elif price_range == 3:
        return "expensive"
    else:
        return "gourmet"

    
#Nomeando/Preenchendo os c√≥digos de pa√≠ses
COLORS = {
"3F7E00": "darkgreen",
"5BA829": "green",
"9ACD32": "lightgreen",
"CDD614": "orange",
"FFBA00": "red",
"CBCBC8": "darkred",
"FF7800": "darkred",
}

def color_name(color_code):
    return COLORS[color_code]


#Renomear as colunas do DataFrame
def rename_columns(dataframe):
    df = dataframe.copy()
    title = lambda x: inflection.titleize(x)
    snakecase = lambda x: inflection.underscore(x)
    spaces = lambda x: x.replace(" ", "")
    cols_old = list(df.columns)
    cols_old = list(map(title, cols_old))
    cols_old = list(map(spaces, cols_old))
    cols_new = list(map(snakecase, cols_old))
    df.columns = cols_new

    return df
  

#Limpeza e Tratamento do Dataframe
def clean_code(df):
    #Excluindo a coluna 'Switch to order menu' por n√£o ter informa√ß√£oes relevantes e todos os valores serem identicos
    df = df.drop('Switch to order menu', axis=1)

    #Identificando se h√° dados duplicados no dataframe
    df = df.drop_duplicates()

    #Excluir as linhas com a tipo de culin√°ria vazia
    df = df.loc[df['Cuisines'].notnull()]

    #Criando nova coluna com nomes dos pa√≠ses
    df["country_name"] = df.loc[:, "Country Code"].apply(lambda x: country_name(x))

    #Criando nova coluna com o tipo de categoria de comida
    df["price_type"] = df.loc[:, "Price range"].apply(lambda x: create_price_tye(x))

    #Criando nova coluna com os nomes das cores por classifica√ß√£0 (rating color)
    df["color_name"] = df.loc[:, "Rating color"].apply(lambda x: color_name(x))

    #Renomear nomes das colunas
    df = rename_columns(df)

    #Categorizar, inicialmente, todos os restaurantes somente por um tipo de culin√°ria.
    df['cuisines'] = df.loc[:, 'cuisines'].apply(lambda x: x.split(', ')[0])
    
        
    #Removendo Culin√°rias que n√£o est√£o categorizadas como pa√≠s/tipo culin√°ria
    lin = (df['cuisines'] != 'Mineira' )
    df = df.loc[lin, :]

    lin = (df['cuisines'] != 'Drinks Only') 
    df = df.loc[lin, :]
    
    #resetar index
    df = df.reset_index()

    return df



#---------------------------------------------- Inicializa√ß√£o do Script ----------------------------------------------
# ======================================
# Limpeza do dataframe
# ======================================

#Import dataset
df_raw = pd.read_csv('dataset/zomato.csv')

# Fazendo uma c√≥pia do DataFrame Lido
df = clean_code(df_raw)


#Countries

# ======================================
# Barra Lateral Streamlit
# ======================================

# Exibindo a logo na sidebar
image = Image.open("images/logofomezero.png")
st.sidebar.image( image, width=160)


# Exibi√ß√£o do filtro para escolha dos pa√≠ses
st.sidebar.markdown('## Filtros')

countries_options = st.sidebar.multiselect(
    '_Escolha os pa√≠ses que deseja visualizar os restaurantes_',
    ['Philippines', 'Brazil', 'Australia', 'United States of America',
       'Canada', 'Singapure', 'United Arab Emirates', 'India',
       'Indonesia', 'New Zeland', 'England', 'Qatar', 'South Africa',
       'Sri Lanka', 'Turkey'],
    
    default=['Brazil', 'Australia', 'Canada', 'England', 'Qatar', 'South Africa'] )


st.sidebar.markdown("""___""")
st.sidebar.markdown("###### Desenvolvido por Lais Araujo")


# ======================================
# Filtros Streamlit
# ======================================


#Filtros de transito para toda p√°gina
linhas_selecionadas = df['country_name'].isin( countries_options )
df = df.loc[linhas_selecionadas, :]

# ======================================
# Layout Streamlit
# ======================================


#T√≠tulo da p√°gina Countries
st.markdown('# üåé Vis√£o Pa√≠ses')
        

with st.container():
        
    fig = restaurant_countries(df)
    st.plotly_chart(fig, use_container_width=True) 
    
            
with st.container():
    
    fig = cities_countries(df)
    st.plotly_chart(fig, use_container_width=True) 
    
            
with st.container():
    
    col1, col2 = st.columns(2)
    
    with col1:
        
        fig = mean_votes_countries(df)
        st.plotly_chart(fig, use_container_width=True) 
        
    
    with col2:
        
        fig = average_cost_for_two_countries(df)
        st.plotly_chart(fig, use_container_width=True) 